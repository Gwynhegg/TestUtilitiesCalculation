В данном файле я постараюсь кратко обосновать свои решения и описать структуру приложения.

База данных:
В качестве базы данных была выбрана SQLite в силу простоты применения, легковесности и наличия SQL-синтаксиса.
Объект для установки соединения с базой помещен в отдельный класс DataConnector, в нем также происходят все запросы к БД.
Все приведенные в программе сущности и операции имеют свое отображение в таблицах базы: таблица юзеров, услуг и транзакций.

Пользователи, счетчики и услуги:
Для указанных сущностей было создано три класса с набором полей и методом для взаимодействия с ними. В классе User был реализован
принцип конструктора (задание счетчиков происходит в методах, при необходимости эти методы могут быть опущены) и прототипирования для
создания юзеров-клонов.

Набор UserSet и ServiceSet:
Для обработки и хранения наборов юзеров и услуг были созданы два класса-коллекции, имеющие методы для обработки и обращения к 
конкретным экземплярам.

Класс Account и Bill'ы:
Для формирования счета по указанию услуг формируется экземпляр класса Account. Поскольку конфигурация приборов учета может быть 
разнообразна, расчеты итоговой суммы ведутся в соответствии со спецификой ПУ. Для этого реализуется интерфейс IBill и его наследники.

Экранные формы:
Поскольку основополагающим элементам приложения WPF является окно MainWindow, здесь и будут расположены экземпляры основополагающих
элементов. Вся логика функционирования приложения также отсылает к использованию параметра parent - ссылки на главное окно.
Стоит дополнить, что окно неизменно, а меняющийся интерфейс обеспечен различными Page'ами (страницами), которые подставляются в
главное окно (разве что форма результатов нарушает данное правило).